// <auto-generated />
using System;
using DatabaseStorage.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DatabaseStorage.Migrations
{
    [DbContext(typeof(DiscRentalDb))]
    [Migration("20220517095503_ChangeProductEntity")]
    partial class ChangeProductEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DatabaseStorage.Entityes.Disc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfRelease")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Discs");
                });

            modelBuilder.Entity("DatabaseStorage.Entityes.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("ContactNumber")
                        .IsUnique();

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("DatabaseStorage.Entityes.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<int>("DiscId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DatabaseStorage.Entityes.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfRental")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<double>("PledgeSum")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double?>("ReturnSum")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DiscId");

                    b.HasIndex("PersonId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("DatabaseStorage.Entityes.Sell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfSell")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscId");

                    b.HasIndex("PersonId");

                    b.ToTable("Sellls");
                });

            modelBuilder.Entity("DatabaseStorage.Entityes.BluRayDisc", b =>
                {
                    b.HasBaseType("DatabaseStorage.Entityes.Disc");

                    b.Property<string>("Info")
                        .HasMaxLength(1023)
                        .HasColumnType("nvarchar(1023)");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SystemRequirements")
                        .HasMaxLength(1023)
                        .HasColumnType("nvarchar(1023)");

                    b.ToTable("BluRayDisc");
                });

            modelBuilder.Entity("DatabaseStorage.Entityes.CdDisc", b =>
                {
                    b.HasBaseType("DatabaseStorage.Entityes.Disc");

                    b.Property<string>("Genre")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NumberOfTracks")
                        .HasColumnType("int");

                    b.Property<string>("Performer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("CdDisc");
                });

            modelBuilder.Entity("DatabaseStorage.Entityes.DvdDisc", b =>
                {
                    b.HasBaseType("DatabaseStorage.Entityes.Disc");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Info")
                        .HasMaxLength(1023)
                        .HasColumnType("nvarchar(1023)");

                    b.Property<string>("Plot")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("DvdDisc");
                });

            modelBuilder.Entity("DatabaseStorage.Entityes.Client", b =>
                {
                    b.HasBaseType("DatabaseStorage.Entityes.Person");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("DatabaseStorage.Entityes.Employee", b =>
                {
                    b.HasBaseType("DatabaseStorage.Entityes.Person");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<double?>("Prize")
                        .HasColumnType("float");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("DatabaseStorage.Entityes.Product", b =>
                {
                    b.HasOne("DatabaseStorage.Entityes.Disc", "Disc")
                        .WithMany()
                        .HasForeignKey("DiscId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disc");
                });

            modelBuilder.Entity("DatabaseStorage.Entityes.Rental", b =>
                {
                    b.HasOne("DatabaseStorage.Entityes.Product", "Product")
                        .WithMany("Rentals")
                        .HasForeignKey("DiscId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseStorage.Entityes.Client", "Client")
                        .WithMany("Rentals")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseStorage.Entityes.Employee", "Employee")
                        .WithMany("Rentals")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Employee");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DatabaseStorage.Entityes.Sell", b =>
                {
                    b.HasOne("DatabaseStorage.Entityes.Product", "Product")
                        .WithMany("Sells")
                        .HasForeignKey("DiscId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseStorage.Entityes.Employee", "Employee")
                        .WithMany("Sells")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DatabaseStorage.Entityes.BluRayDisc", b =>
                {
                    b.HasOne("DatabaseStorage.Entityes.Disc", null)
                        .WithOne()
                        .HasForeignKey("DatabaseStorage.Entityes.BluRayDisc", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseStorage.Entityes.CdDisc", b =>
                {
                    b.HasOne("DatabaseStorage.Entityes.Disc", null)
                        .WithOne()
                        .HasForeignKey("DatabaseStorage.Entityes.CdDisc", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseStorage.Entityes.DvdDisc", b =>
                {
                    b.HasOne("DatabaseStorage.Entityes.Disc", null)
                        .WithOne()
                        .HasForeignKey("DatabaseStorage.Entityes.DvdDisc", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseStorage.Entityes.Client", b =>
                {
                    b.HasOne("DatabaseStorage.Entityes.Person", null)
                        .WithOne()
                        .HasForeignKey("DatabaseStorage.Entityes.Client", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseStorage.Entityes.Employee", b =>
                {
                    b.HasOne("DatabaseStorage.Entityes.Person", null)
                        .WithOne()
                        .HasForeignKey("DatabaseStorage.Entityes.Employee", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseStorage.Entityes.Product", b =>
                {
                    b.Navigation("Rentals");

                    b.Navigation("Sells");
                });

            modelBuilder.Entity("DatabaseStorage.Entityes.Client", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("DatabaseStorage.Entityes.Employee", b =>
                {
                    b.Navigation("Rentals");

                    b.Navigation("Sells");
                });
#pragma warning restore 612, 618
        }
    }
}
